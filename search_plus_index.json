{"./":{"url":"./","title":"前言","keywords":"","body":"Go语言——面向Offer学习编程 最新版本：v1.2 更新时间：20211023 简介 Golang版剑指Offer+LeetCode题解。 从Offer角度零基础入门Golang，介绍Golang的基础语法，深入分析Golang结构、源码，介绍Golang著名框架，到实战项目。 版权说明 此电子书教程的全部内容，如无特别说明，均为本人原创和整理。其中部分内容参考自网络，均已备注了出处。如有发现侵犯您版权，请通过邮箱联系我 sailaoda1@gmail.com，我会尽快删除。谢谢合作。 鸣谢 感谢自己的包容理解和悉心照料，才使得我有更多精力去专注技术专研和整理归纳出这些电子书和技术教程，特此鸣谢。 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 02:33:34 "},"Golang版剑指Offer/":{"url":"Golang版剑指Offer/","title":"剑指Offer","keywords":"","body":"Golang版剑指Offer 前言 题目来自《何海涛. 剑指 Offer[M]. 电子工业出版社, 2012.》，刷题网站推荐： 牛客网 Leetcode 链表篇 剑指Offer06.从尾到头打印链表 剑指Offer24.反转链表 剑指Offer35.复杂链表的复制 剑指Offer22.链表中倒数第k个节点 剑指Offer25.合并两个排序的链表 栈与队列篇 剑指Offer09.用两个栈实现队列 剑指Offer30.包含min函数的栈 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 02:29:13 "},"Golang版剑指Offer/链表篇/":{"url":"Golang版剑指Offer/链表篇/","title":"链表篇","keywords":"","body":"链表篇 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:35:00 "},"Golang版剑指Offer/链表篇/剑指Offer06.从尾到头打印链表.html":{"url":"Golang版剑指Offer/链表篇/剑指Offer06.从尾到头打印链表.html","title":"剑指Offer06.从尾到头打印链表","keywords":"","body":"剑指Offer06.从尾到头打印链表 题目描述： 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 示例 ： 输入：head = [1,3,2] 输出：[2,3,1] 限制： 0 算法代码： /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ //直接递归反转 func reversePrint(head *ListNode) []int { if head == nil {return nil} return append(reversePrint(head.Next) , head.Val) } func reversePrint(head *ListNode) []int { // 1.遍历链表时直接Val添加到数组头部:时间复杂度O(N) | 空间复杂度O(1) ans := []int{} for head != nil { ans = append([]int{head.Val}, ans...) head = head.Next } return ans } 算法思路： 递归法 辅助栈法 直接顺序获取值放到数组，再反转结果 算法改进：（数组索引） /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func reversePrint(head *ListNode) []int { if head == nil { return nil } res := []int{} for head != nil { res = append(res, head.Val) head = head.Next } for i, j := 0, len(res)-1; i hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:48:10 "},"Golang版剑指Offer/链表篇/剑指Offer24.反转链表.html":{"url":"Golang版剑指Offer/链表篇/剑指Offer24.反转链表.html","title":"剑指Offer24.反转链表","keywords":"","body":"剑指Offer24.反转链表 题目描述： 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。 示例: 输入: 1->2->3->4->5->NULL 输出: 5->4->3->2->1->NULL 限制： 0 算法代码： // 递归 func reverseList(head *ListNode) *ListNode { if head == nil || head.Next == nil { return head } var p = reverseList(head.Next) head.Next.Next = head head.Next = nil return p } 算法思路： 常规的递归思路。 算法优化： 链表节点中有两个元素： 值 指针 type ListNode struct { Val int Next *ListNode } Next指向下一个节点 那么这道题其实就是把指针指向前一个节点 位置调换次数 pre cur whole 0 nil 1->2->3->4->5 1->2->3->4->5 1 1->nil 2->-3>->4->5 2->3->4->5->1->nil 2 2->1->nil 3->4->5 3->4->5->2->1->nil 3 3->2->1->nil 4->5 4->5->3->2->1->nil 4 4->3->2->1->nil 5 5->4->3->2->1->nil 可以看出来 pre是cur的最前面那位（pre = cur） cur就是当前位的后面链表元素（cur = cur.Next） cur.Next肯定是接pre（cur.Next = pre） 优化代码： //反转链表的实现 func reversrList(head *ListNode) *ListNode { cur := head var pre *ListNode = nil for cur != nil { pre, cur, cur.Next = cur, cur.Next, pre //这句话最重要 } return pre } hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:50:38 "},"Golang版剑指Offer/链表篇/剑指Offer22.链表中倒数第k个节点.html":{"url":"Golang版剑指Offer/链表篇/剑指Offer22.链表中倒数第k个节点.html","title":"剑指Offer22.链表中倒数第k个节点","keywords":"","body":"剑指Offer22.链表中倒数第k个节点 题目描述： 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。 例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。 示例： 给定一个链表: 1->2->3->4->5, 和 k = 2. 返回链表 4->5. 算法思路： 快慢指针法： 快指针先走k，然后快慢指针一起走，快指针走到终点时，慢指针即为所求。 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func getKthFromEnd(head *ListNode, k int) *ListNode { var slow , fast *ListNode = head , head for i := 0 ; i 数组索引法 func getKthFromEnd(head *ListNode, k int) *ListNode { var res []*ListNode for head != nil { res = append(res , head) head = head.Next } l := len(res) if l >= k { return res[l - k] } return nil } 以空间换时间。 空间都不大行。 遍历递归 func getKthFromEnd(head *ListNode, k int) *ListNode { if head == nil { return nil } node ,_ := getKthFromEndre(head,k) return node } func getKthFromEndre(head *ListNode, k int) (*ListNode, int) { if head == nil { return nil,0 //遍历到最后返回0，开始往上+1判断是否等于k，等于的话直接返回node } node, res := getKthFromEndre(head.Next, k) if res == k { return node, res } res++ return head, res } hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:51:56 "},"Golang版剑指Offer/链表篇/剑指Offer25.合并两个排序的链表.html":{"url":"Golang版剑指Offer/链表篇/剑指Offer25.合并两个排序的链表.html","title":"剑指Offer25.合并两个排序的链表","keywords":"","body":"剑指Offer25.合并两个排序的链表 题目描述： 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。 示例1： 输入：1->2->4, 1->3->4 输出：1->1->2->3->4->4 限制： 0 解题思路： 中心思想：因为有序，则利用双指针分别指向两条链表的表头，然后通过比较大小改变这些节点的指向即可。 利用一个头节点head简化合并过程。 算法代码： /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { head := &ListNode { Val : 0 , Next : nil , } p := head for l1 != nil && l2 != nil { if l1.Val hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:52:34 "},"Golang版剑指Offer/链表篇/剑指Offer35.复杂链表的复制.html":{"url":"Golang版剑指Offer/链表篇/剑指Offer35.复杂链表的复制.html","title":"剑指Offer35.复杂链表的复制","keywords":"","body":"剑指Offer35.复杂链表的复制 题目描述： 请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。 示例： 示例 1： 输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]] 输出：[[7,null],[13,0],[11,4],[10,2],[1,0]] 示例 2： 输入：head = [[1,1],[2,1]] 输出：[[1,1],[2,1]] 示例 3： 输入：head = [[3,null],[3,0],[3,null]] 输出：[[3,null],[3,0],[3,null]] 示例 4： 输入：head = [] 输出：[] 解释：给定的链表为空（空指针），因此返回 null。 提示： -10000 Node.random 为空（null）或指向链表中的节点。 节点数目不超过 1000 。 算法代码： /** * Definition for a Node. * type Node struct { * Val int * Next *Node * Random *Node * } */ func copyRandomList(head *Node) *Node { } hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:53:11 "},"Golang版剑指Offer/栈与队列篇/":{"url":"Golang版剑指Offer/栈与队列篇/","title":"栈与队列篇","keywords":"","body":"栈与队列篇 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:44:50 "},"Golang版剑指Offer/栈与队列篇/剑指Offer09.用两个栈实现队列.html":{"url":"Golang版剑指Offer/栈与队列篇/剑指Offer09.用两个栈实现队列.html","title":"剑指Offer09.用两个栈实现队列","keywords":"","body":"剑指Offer09.用两个栈实现队列 题目描述： 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 ) 示例： 示例 1： 输入： [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[3],[],[]] 输出：[null,null,3,-1] 示例 2： 输入： [\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[],[5],[2],[],[]] 输出：[null,-1,null,null,5,2] 提示： 1 最多会对 appendTail、deleteHead 进行 10000 次调用 算法代码： type CQueue struct { // 栈 A，用于添加元素 stackA []int // 栈 B，用于取出元素 stackB []int } // CQueue 的构造函数 func Constructor() CQueue { // 返回一个新的 CQueue return CQueue{} } // 往队列插入整数 func (this *CQueue) AppendTail(value int) { // 在 stackA 的末尾追加 value this.stackA = append(this.stackA, value) } // 从队列取出整数并删除 func (this *CQueue) DeleteHead() int { // 如果 stackB 没有元素则从 stackA 中取出所有 if len(this.stackB) == 0 { // 如果 stackA 里也没有元素，则队列为空返回 -1 if len(this.stackA) == 0 { return -1 } // 将 stackA 的所有元素转移到 stackB for len(this.stackA) > 0 { // 获取 stackA 最末尾元素的下标 index := len(this.stackA) - 1 // 获取 stackA 最末尾元素的值 value value := this.stackA[index] // 向 stackB 的末尾追加 value this.stackB = append(this.stackB, value) // 从 stackA 中裁剪出末尾元素 this.stackA = this.stackA[:index] } } // 这时候表示 stackB 内已有元素 // 获取 stackB 最末尾元素的下标 index := len(this.stackB) - 1 // 获取 stackB 最末尾元素的值 value value := this.stackB[index] // 从 stackB 中裁剪出末尾元素 this.stackB = this.stackB[:index] // 返回 value return value } /** * Your CQueue object will be instantiated and called as such: * obj := Constructor(); * obj.AppendTail(value); * param_2 := obj.DeleteHead(); */ 算法思路： 用两个栈来模拟队列先进先出的特性，栈A用来添加元素，栈B用来取出元素，取出元素通过将A栈中元素取出倒序添加进入B栈中实现，去掉栈B的栈首元素即为去掉栈A的栈底元素。 以此来模拟队列中的先进先出特性。 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:56:57 "},"Golang版剑指Offer/栈与队列篇/剑指Offer30.包含min函数的栈.html":{"url":"Golang版剑指Offer/栈与队列篇/剑指Offer30.包含min函数的栈.html","title":"剑指Offer30.包含min函数的栈","keywords":"","body":"剑指Offer30.包含min函数的栈 题目描述： 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。 示例: MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.min(); --> 返回 -3. minStack.pop(); minStack.top(); --> 返回 0. minStack.min(); --> 返回 -2. 提示： 各函数的调用总次数不超过 20000 次 算法代码： type MinStack struct { stack []int minstack []int } /** initialize your data structure here. */ func Constructor() MinStack { return MinStack{ stack: []int{}, minstack: []int{math.MaxInt64}, } } func (this *MinStack) Push(x int) { this.stack = append(this.stack , x) this.minstack = append(this.minstack , min(this.minstack[len(this.minstack) - 1] , x)) } func (this *MinStack) Pop() { this.minstack = this.minstack[:len(this.minstack) - 1] this.stack = this.stack[:len(this.stack) - 1] } func (this *MinStack) Top() int { return this.stack[len(this.stack) - 1] } func (this *MinStack) Min() int { return this.minstack[len(this.minstack) - 1] } func min(x int , y int ) int { if x >= y { return y }else { return x } } /** * Your MinStack object will be instantiated and called as such: * obj := Constructor(); * obj.Push(x); * obj.Pop(); * param_3 := obj.Top(); * param_4 := obj.Min(); */ 算法思路： 利用一个辅助栈来存放较小值，在辅助栈的栈顶总是为所有元素的最小值。 注意： 不能直接返回return MinStack{} func Constructor() MinStack { return MinStack{ stack: []int{}, minstack: []int{math.MaxInt64}, } } 当测试用例如下时： [\"MinStack\",\"push\",\"push\",\"push\",\"top\",\"pop\",\"min\",\"pop\",\"min\",\"pop\",\"push\",\"top\",\"min\",\"push\",\"top\",\"min\",\"pop\",\"min\"] [[],[2147483646],[2147483646],[2147483647],[],[],[],[],[],[],[2147483647],[],[],[-2147483648],[],[],[],[]] 直接返回return MinStack{}会发生错误。 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:57:37 "},"Golang版LeetCode/":{"url":"Golang版LeetCode/","title":"Leetcode","keywords":"","body":"Golang版Leetcode 数组篇 LeetCode136.只出现一次的数字 LeetCode169.多数元素 LeetCode15.三数之和 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 02:04:28 "},"Golang版LeetCode/数组篇/":{"url":"Golang版LeetCode/数组篇/","title":"数组篇","keywords":"","body":"数组篇 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:44:50 "},"Golang版LeetCode/数组篇/LeetCode136.只出现一次的数字.html":{"url":"Golang版LeetCode/数组篇/LeetCode136.只出现一次的数字.html","title":"LeetCode136.只出现一次的数字","keywords":"","body":"LeetCode136.只出现一次的数字 题目描述： 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 示例： 示例 1: 输入: [2,2,1] 输出: 1 示例 2: 输入: [4,1,2,1,2] 输出: 4 算法代码： func singleNumber(nums []int) int { single := 0 for _,num := range nums { single ^= num } return single } 算法思路： 只有一个数字只出现一次，其他数字都出现两次，相同数字位运算结果为0，单独数字和0做位运算结果为他本身。 即只需要对整个数组做位运算，可以找出唯一单独的数字。 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:54:21 "},"Golang版LeetCode/数组篇/LeetCode169.多数元素.html":{"url":"Golang版LeetCode/数组篇/LeetCode169.多数元素.html","title":"LeetCode169.多数元素","keywords":"","body":"LeetCode169.多数元素 题目描述： 给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。 你可以假设数组是非空的，并且给定的数组总是存在多数元素。 示例： 示例 1： 输入：[3,2,3] 输出：3 示例 2： 输入：[2,2,1,1,1,2,2] 输出：2 算法代码： func majorityElement(nums []int) int { major := 0 count := 0 for _,num := range nums{ if count == 0 { major = num } if major == num { count ++ }else{ count -- } } return najor } 算法思路： 摩尔投票法：利用相互抵消的概念 排序法： 排序之后的中间值一定为众数 func majorityElement(nums []int) int { sort.Ints(nums) index := len(nums) return nums[len/2] } hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:54:50 "},"Golang版LeetCode/数组篇/LeetCode15.三数之和.html":{"url":"Golang版LeetCode/数组篇/LeetCode15.三数之和.html","title":"LeetCode15.三数之和","keywords":"","body":"LeetCode15.三数之和 题目描述： 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。 注意： 答案中不可以包含重复的三元组。 示例： 示例 1： 输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 示例 2： 输入：nums = [] 输出：[] 示例 3： 输入：nums = [0] 输出：[] 提示： 0 算法代码： func threeSum(nums []int) [][]int { n := len(nums) sort.Ints(nums) //ans := make([][]int, 0) ans := [][]int{} // 枚举 a for first := 0; first 0 && nums[first] == nums[first - 1] { continue } // c 对应的指针初始指向数组的最右端 third := n - 1 target := -1 * nums[first] // 枚举 b for second := first + 1; second first + 1 && nums[second] == nums[second - 1] { continue } // 需要保证 b 的指针在 c 的指针的左侧 for second target { third-- } // 如果指针重合，随着 b 后续的增加 // 就不会有满足 a+b+c=0 并且 b 算法思路： 排序加双指针的思想 算法改进： func threeSum(nums []int)[][]int{ n := len(nums) sort.Ints(nums) ans := [][]int{} for first := 0 ; first 0 { break } if first > 0 && nums[first] == nums[first - 1] { continue } second , third := first + 1 , n - 1 for second hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-24 01:55:32 "},"Golang实战高并发即时聊天IM应用/":{"url":"Golang实战高并发即时聊天IM应用/","title":"项目介绍","keywords":"","body":"项目介绍 用Go语言打造支持同时10万人在线的IM系统 IM系统特性 IM是社交/电商/办公标配 IM产品技术含量很高，高并发，分布式等技术要求应对突发事件的能力 IM产品用户对性能和体验敏感 需要具备迅速响应突发事件的能力 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:34:02 "},"Golang实战高并发即时聊天IM应用/IM系统需求分析/":{"url":"Golang实战高并发即时聊天IM应用/IM系统需求分析/","title":"IM系统需求分析","keywords":"","body":"IM系统需求分析 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/应用相关技术难点/":{"url":"Golang实战高并发即时聊天IM应用/应用相关技术难点/","title":"应用相关技术难点","keywords":"","body":"应用相关技术难点 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/应用相关技术难点/系统架构.html":{"url":"Golang实战高并发即时聊天IM应用/应用相关技术难点/系统架构.html","title":"系统架构","keywords":"","body":"系统架构 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/应用相关技术难点/WebSocker.html":{"url":"Golang实战高并发即时聊天IM应用/应用相关技术难点/WebSocker.html","title":"WebSocket","keywords":"","body":"WebSocket hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/应用相关技术难点/优化单机性能.html":{"url":"Golang实战高并发即时聊天IM应用/应用相关技术难点/优化单机性能.html","title":"优化单机性能","keywords":"","body":"优化单机性能 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/","title":"搭建应用框架","keywords":"","body":"搭建应用框架 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/web_http编程核心API.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/web_http编程核心API.html","title":"web_http编程核心API","keywords":"","body":"web_http编程核心API hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/登录简单逻辑实现.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/登录简单逻辑实现.html","title":"登录简单逻辑实现","keywords":"","body":"登录简单逻辑实现 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/代码结构优化.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/代码结构优化.html","title":"代码结构优化","keywords":"","body":"代码结构优化 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/页面展示与指定文件支持.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/页面展示与指定文件支持.html","title":"页面展示与指定文件支持","keywords":"","body":"页面展示与指定文件支持 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/templete模板渲染.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/templete模板渲染.html","title":"templete模板渲染","keywords":"","body":"templete模板渲染 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/使用xorm操作数据库.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/使用xorm操作数据库.html","title":"使用xorm操作数据库","keywords":"","body":"使用xorm操作数据库 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/service层实现注册逻辑.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/service层实现注册逻辑.html","title":"service层实现注册逻辑","keywords":"","body":"service层实现注册逻辑 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/对service层的调用.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/对service层的调用.html","title":"对service层的调用","keywords":"","body":"对service层的调用 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/搭建应用框架/基于MVC思想的架构.html":{"url":"Golang实战高并发即时聊天IM应用/搭建应用框架/基于MVC思想的架构.html","title":"基于MVC思想的架构","keywords":"","body":"基于MVC思想的架构 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/","title":"IM功能实现","keywords":"","body":"IM功能实现 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/mui+vue实现的聊天界面.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/mui+vue实现的聊天界面.html","title":"mui+vue实现的聊天界面","keywords":"","body":"mui+vue实现的聊天界面 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/接入聊天主页面.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/接入聊天主页面.html","title":"接入聊天主页面","keywords":"","body":"接入聊天主页面 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/显示好友列表和群.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/显示好友列表和群.html","title":"显示好友列表和群","keywords":"","body":"显示好友列表和群 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/接入websocket实现文字通讯.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/接入websocket实现文字通讯.html","title":"接入websocket实现文字通讯","keywords":"","body":"接入websocket实现文字通讯 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/设计可扩张业务的消息通讯架构.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/设计可扩张业务的消息通讯架构.html","title":"设计可扩张业务的消息通讯架构","keywords":"","body":"设计可扩张业务的消息通讯架构 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/实现发送文字表情包.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/实现发送文字表情包.html","title":"实现发送文字表情包","keywords":"","body":"实现发送文字表情包 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/实现图片及图片拍照发送.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/实现图片及图片拍照发送.html","title":"实现图片及图片拍照发送","keywords":"","body":"实现图片及图片拍照发送 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/实现语音和视频支持.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/实现语音和视频支持.html","title":"实现语音和视频支持","keywords":"","body":"实现语音和视频支持 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/实现群聊.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/实现群聊.html","title":"实现群聊","keywords":"","body":"实现群聊 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/IM功能实现/性能优化.html":{"url":"Golang实战高并发即时聊天IM应用/IM功能实现/性能优化.html","title":"性能优化","keywords":"","body":"性能优化 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/分布式部署/":{"url":"Golang实战高并发即时聊天IM应用/分布式部署/","title":"分布式部署","keywords":"","body":"分布式部署 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/分布式部署/分布式架构方案.html":{"url":"Golang实战高并发即时聊天IM应用/分布式部署/分布式架构方案.html","title":"分布式架构方案","keywords":"","body":"分布式架构方案 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/分布式部署/分布式功能实现.html":{"url":"Golang实战高并发即时聊天IM应用/分布式部署/分布式功能实现.html","title":"分布式功能实现","keywords":"","body":"分布式功能实现 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/分布式部署/nginx反向代理多台服务器部署.html":{"url":"Golang实战高并发即时聊天IM应用/分布式部署/nginx反向代理多台服务器部署.html","title":"nginx反向代理多台服务器部署","keywords":"","body":"nginx反向代理多台服务器部署 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/项目发布和部署/":{"url":"Golang实战高并发即时聊天IM应用/项目发布和部署/","title":"项目发布和部署","keywords":"","body":"项目发布和部署 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "},"Golang实战高并发即时聊天IM应用/项目总结/":{"url":"Golang实战高并发即时聊天IM应用/项目总结/","title":"项目总结","keywords":"","body":"项目总结 hackerwu.cn，使用 知识共享 署名-非商业性使用-禁止演绎 4.0 国际 许可协议发布 all right reserved，powered by Gitbook最后更新： 2021-10-26 11:28:33 "}}